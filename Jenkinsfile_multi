#!/usr/bin/env groovy

@NonCPS def entries(m) {m.collect {k, v -> [k, v]}}

def helmDeploy(Map args) {
    println "Running helm deployment, current branch: ${args.branch_name}"
    def envs = entries(args.envs)

    for ( int i = 0; i < envs.size(); i++ ) {
        def env = envs.get(i)
        def envname = env[0]
        def envmap = env[1]

        if (envmap.branch == args.branch_name) {
            println "branch match found for env ${envname} and branch ${envmap.branch}"
            def env_name = "${args.name}-${envname}"
            def install_args = "--install --set image.repository=${args.repository},image.tag=${args.tag} --namespace=${envmap.namespace} ${env_name} ${args.chart_path}"

            sh "helm upgrade ${install_args}"

            println "Chart instance ${env_name} successfully deployed into ${envmap.namespace}. Use helm status ${env_name} to check"
        }
    }
}

def helmDelete(Map args) {
    def envs = entries(args.envs)

    for ( int i = 0; i < envs.size(); i++ ) {
        def env = envs.get(i)
        def envname = env[0]
        def envmap = env[1]

        if (envmap.branch == args.branch_name) {
            def env_name = "${args.name}-${envname}"
            sh "helm delete --purge ${env_name}"
            println "Chart instance ${env_name} successfully deleted"
        }
    }
}

def testDeploy(Map args) {
    def envs = entries(args.envs)

    for ( int i = 0; i < envs.size(); i++ ) {
        def env = envs.get(i)
        def envname = env[0]
        def envmap = env[1]

        if (envmap.branch == args.branch_name) {
            def env_name = "${args.name}-${envname}"
            sh "helm delete --purge ${env_name}"
            sh('sleep 30 && export SVC_IP=$(kubectl -n cookbook get svc ${env_name} --template "{{ range (index .status.loadBalancer.ingress 0) }}{{ . }}{{ end }}") && wget -q -O - http://$SVC_IP | grep "archive/" -q')
        }
    }
}

podTemplate(label: 'default',
slaveConnectTimeout: 120,
containers: [
    containerTemplate(name: 'docker', image: 'docker', command: '/bin/cat', args: '', ttyEnabled: true, resourceRequestCpu: '25m'),
    containerTemplate(name: 'kubectl', image: 'lachlanevenson/k8s-kubectl', command: '/bin/cat', ttyEnabled: true, resourceRequestCpu: '25m'),
    containerTemplate(name: 'helm', image: 'lachlanevenson/k8s-helm', command: '/bin/cat', args: '', ttyEnabled: true, resourceRequestCpu: '25m'),
],
volumes: [
    hostPathVolume(hostPath: '/var/run/docker.sock', mountPath: '/var/run/docker.sock'),
    secretVolume(secretName: 'jenkins-gcr-keys', mountPath: '/repo_keys'),
]) {
    node('default') {
        def currentCommitHash = ""
        def helmChartPath = "helm/demo-app"
        def helmReleaseName = "demo-app-jenk"
        def gcloud_project = "sharktopus-148619"
        def containerName = "test_app"
        def gcr_cred = readFile('/repo_keys/deploy.json')
        def config = null

        stage('checkout') {
            scm_vars = checkout scm
            println "checkout successful"
            currentCommitHash = "${scm_vars.GIT_COMMIT}"

            def inputFile = readFile('jenkins_branches.json')
            config = new groovy.json.JsonSlurperClassic().parseText(inputFile)
        }

        def releaseVersion = "${currentCommitHash}.${env.BUILD_NUMBER}"
        def releaseTag = "${containerName}:${releaseVersion}"
        def dockerRepo = "gcr.io/${gcloud_project}/"
        def repoTag = "${dockerRepo}${releaseTag}"

        stage('build') {
            container('docker') {
                sh("cd app && docker build -f good.Dockerfile -t ${releaseTag} .")
            }
        }

        stage('test') {
            container('docker') {
                sh("docker run ${releaseTag} echo 'OK'")
            }
        }

        stage('push') {
            container('docker') {
                sh("docker tag ${releaseTag} ${repoTag}")
                println "executing docker login"
                sh("set +x && docker login -u _json_key -p '${gcr_cred}' https://gcr.io")
                sh("docker push ${repoTag}")
            }
        }

        stage('deploy') {
            container('helm') {
                helmDeploy(
                    name: helmReleaseName,
                    branch_name: env.BRANCH_NAME,
                    repository: "${dockerRepo}${containerName}",
                    tag: releaseVersion,
                    chart_path: helmChartPath,
                    envs: config.envs
                )
            }
        }

        stage('test deploy') {
            container('kubectl') {
                // TODO: gross sleep for now, replace with real service check
                testDeploy(
                    name: helmReleaseName,
                    branch_name: env.BRANCH_NAME,
                    envs: config.envs
                )
            }
        }

        stage('clean up deploy') {
            container('helm') {
                helmDelete(
                    name: helmReleaseName,
                    branch_name: env.BRANCH_NAME,
                    envs: config.envs
                )
            }
        }
    }
}
